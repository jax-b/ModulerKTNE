// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: gamestate.proto

package WireTypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Indicator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Lit           bool                   `protobuf:"varint,2,opt,name=Lit,proto3" json:"Lit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	mi := &file_gamestate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_gamestate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_gamestate_proto_rawDescGZIP(), []int{0}
}

func (x *Indicator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Indicator) GetLit() bool {
	if x != nil {
		return x.Lit
	}
	return false
}

type GamePorts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DVI           bool                   `protobuf:"varint,1,opt,name=DVI,proto3" json:"DVI,omitempty"`
	Parallel      bool                   `protobuf:"varint,2,opt,name=Parallel,proto3" json:"Parallel,omitempty"`
	PS2           bool                   `protobuf:"varint,3,opt,name=PS2,proto3" json:"PS2,omitempty"`
	RJ45          bool                   `protobuf:"varint,4,opt,name=RJ45,proto3" json:"RJ45,omitempty"`
	Serial        bool                   `protobuf:"varint,5,opt,name=Serial,proto3" json:"Serial,omitempty"`
	StereoRCA     bool                   `protobuf:"varint,6,opt,name=StereoRCA,proto3" json:"StereoRCA,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GamePorts) Reset() {
	*x = GamePorts{}
	mi := &file_gamestate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePorts) ProtoMessage() {}

func (x *GamePorts) ProtoReflect() protoreflect.Message {
	mi := &file_gamestate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePorts.ProtoReflect.Descriptor instead.
func (*GamePorts) Descriptor() ([]byte, []int) {
	return file_gamestate_proto_rawDescGZIP(), []int{1}
}

func (x *GamePorts) GetDVI() bool {
	if x != nil {
		return x.DVI
	}
	return false
}

func (x *GamePorts) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

func (x *GamePorts) GetPS2() bool {
	if x != nil {
		return x.PS2
	}
	return false
}

func (x *GamePorts) GetRJ45() bool {
	if x != nil {
		return x.RJ45
	}
	return false
}

func (x *GamePorts) GetSerial() bool {
	if x != nil {
		return x.Serial
	}
	return false
}

func (x *GamePorts) GetStereoRCA() bool {
	if x != nil {
		return x.StereoRCA
	}
	return false
}

type GameState struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Seed               uint32                 `protobuf:"varint,1,opt,name=Seed,proto3" json:"Seed,omitempty"`
	Batteries          uint32                 `protobuf:"varint,2,opt,name=Batteries,proto3" json:"Batteries,omitempty"`
	GamePorts          *GamePorts             `protobuf:"bytes,3,opt,name=GamePorts,proto3" json:"GamePorts,omitempty"`
	TimerRunning       bool                   `protobuf:"varint,4,opt,name=TimerRunning,proto3" json:"TimerRunning,omitempty"`
	TimerValue         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=TimerValue,proto3" json:"TimerValue,omitempty"`
	TimerReductionRate float32                `protobuf:"fixed32,6,opt,name=TimerReductionRate,proto3" json:"TimerReductionRate,omitempty"`
	SerialNumber       string                 `protobuf:"bytes,7,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	LitIndicators      []*Indicator           `protobuf:"bytes,8,rep,name=LitIndicators,proto3" json:"LitIndicators,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GameState) Reset() {
	*x = GameState{}
	mi := &file_gamestate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_gamestate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_gamestate_proto_rawDescGZIP(), []int{2}
}

func (x *GameState) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *GameState) GetBatteries() uint32 {
	if x != nil {
		return x.Batteries
	}
	return 0
}

func (x *GameState) GetGamePorts() *GamePorts {
	if x != nil {
		return x.GamePorts
	}
	return nil
}

func (x *GameState) GetTimerRunning() bool {
	if x != nil {
		return x.TimerRunning
	}
	return false
}

func (x *GameState) GetTimerValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimerValue
	}
	return nil
}

func (x *GameState) GetTimerReductionRate() float32 {
	if x != nil {
		return x.TimerReductionRate
	}
	return 0
}

func (x *GameState) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *GameState) GetLitIndicators() []*Indicator {
	if x != nil {
		return x.LitIndicators
	}
	return nil
}

var File_gamestate_proto protoreflect.FileDescriptor

const file_gamestate_proto_rawDesc = "" +
	"\n" +
	"\x0fgamestate.proto\x12\tWireTypes\x1a\x1fgoogle/protobuf/timestamp.proto\"1\n" +
	"\tIndicator\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x10\n" +
	"\x03Lit\x18\x02 \x01(\bR\x03Lit\"\x95\x01\n" +
	"\tGamePorts\x12\x10\n" +
	"\x03DVI\x18\x01 \x01(\bR\x03DVI\x12\x1a\n" +
	"\bParallel\x18\x02 \x01(\bR\bParallel\x12\x10\n" +
	"\x03PS2\x18\x03 \x01(\bR\x03PS2\x12\x12\n" +
	"\x04RJ45\x18\x04 \x01(\bR\x04RJ45\x12\x16\n" +
	"\x06Serial\x18\x05 \x01(\bR\x06Serial\x12\x1c\n" +
	"\tStereoRCA\x18\x06 \x01(\bR\tStereoRCA\"\xe1\x02\n" +
	"\tGameState\x12\x12\n" +
	"\x04Seed\x18\x01 \x01(\rR\x04Seed\x12\x1c\n" +
	"\tBatteries\x18\x02 \x01(\rR\tBatteries\x122\n" +
	"\tGamePorts\x18\x03 \x01(\v2\x14.WireTypes.GamePortsR\tGamePorts\x12\"\n" +
	"\fTimerRunning\x18\x04 \x01(\bR\fTimerRunning\x12:\n" +
	"\n" +
	"TimerValue\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"TimerValue\x12.\n" +
	"\x12TimerReductionRate\x18\x06 \x01(\x02R\x12TimerReductionRate\x12\"\n" +
	"\fSerialNumber\x18\a \x01(\tR\fSerialNumber\x12:\n" +
	"\rLitIndicators\x18\b \x03(\v2\x14.WireTypes.IndicatorR\rLitIndicatorsB(Z&github.com/jax-b/ModulerKTNE/WireTypesb\x06proto3"

var (
	file_gamestate_proto_rawDescOnce sync.Once
	file_gamestate_proto_rawDescData []byte
)

func file_gamestate_proto_rawDescGZIP() []byte {
	file_gamestate_proto_rawDescOnce.Do(func() {
		file_gamestate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gamestate_proto_rawDesc), len(file_gamestate_proto_rawDesc)))
	})
	return file_gamestate_proto_rawDescData
}

var file_gamestate_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gamestate_proto_goTypes = []any{
	(*Indicator)(nil),             // 0: WireTypes.Indicator
	(*GamePorts)(nil),             // 1: WireTypes.GamePorts
	(*GameState)(nil),             // 2: WireTypes.GameState
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_gamestate_proto_depIdxs = []int32{
	1, // 0: WireTypes.GameState.GamePorts:type_name -> WireTypes.GamePorts
	3, // 1: WireTypes.GameState.TimerValue:type_name -> google.protobuf.Timestamp
	0, // 2: WireTypes.GameState.LitIndicators:type_name -> WireTypes.Indicator
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gamestate_proto_init() }
func file_gamestate_proto_init() {
	if File_gamestate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gamestate_proto_rawDesc), len(file_gamestate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gamestate_proto_goTypes,
		DependencyIndexes: file_gamestate_proto_depIdxs,
		MessageInfos:      file_gamestate_proto_msgTypes,
	}.Build()
	File_gamestate_proto = out.File
	file_gamestate_proto_goTypes = nil
	file_gamestate_proto_depIdxs = nil
}
